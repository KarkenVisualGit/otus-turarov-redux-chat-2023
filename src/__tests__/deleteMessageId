import { deleteMessageId, getMessagesWithIds } from '../chat';
jest.mock('../chat');
global.fetch = jest.fn((...args) => {
    console.log('Fetch called with:', args);
    return Promise.resolve({
      ok: true,
      json: () => Promise.resolve({}),
    })as Promise<Response>;
}) as unknown as typeof fetch;
interface FakeMessages {
    [key: string]: {
      id: string;
      nickname: string;
      message: string;
      date: Date; 
    };
  }

describe('deleteMessageId', () => {
  const fakeMessages: FakeMessages = {
    'firebaseId1': { id: '1', nickname: 'User1', message: 'Hello', date: new Date('2023-12-07T06:15:44.308Z') },
    'firebaseId2': { id: '2', nickname: 'User2', message: 'Hi', date: new Date('2023-12-07T06:1:44.308Z') }
  };

  beforeEach(() => {
    jest.clearAllMocks();
    (getMessagesWithIds as jest.Mock).mockResolvedValue(fakeMessages);
    (global.fetch as jest.Mock).mockResolvedValue({ ok: true });
  });

  it('deletes a message with a specific ID', async () => {
    const messageIdToDelete = '1';
    await deleteMessageId(messageIdToDelete);
    const firebaseId = Object.keys(fakeMessages).find(key => fakeMessages[key].id === messageIdToDelete);
    const expectedUrl = 
    `https://task-calendar-turarov-default-rtdb.asia-southeast1.firebasedatabase.app/messages/${firebaseId}.json`;
    expect(global.fetch).toHaveBeenCalledWith(expectedUrl, {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
    });
  });

  it('throws an error if the message ID is not found', async () => {
    const nonExistingMessageId = '3';
    await expect(deleteMessageId(nonExistingMessageId)).rejects.toThrow("Message ID not found in Firebase");
  });

  it('throws an error if the network response is not ok', async () => {
    const messageIdToDelete = '1';
    (global.fetch as jest.Mock).mockResolvedValue({ ok: false });

    await expect(deleteMessageId(messageIdToDelete)).rejects.toThrow("Network response was not ok");
  });
});
